import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Controle de Estoque Recep√ß√£o", 
    page_icon="üì¶", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo da aplica√ß√£o
st.title("üì¶ Controle de Estoque - Recep√ß√£o")
st.markdown("---")

# Fun√ß√£o para carregar a planilha existente
@st.cache_data
def carregar_planilha():
    arquivo_excel = "Controle de estoque recep√ß√£o.xlsx"
    
    try:
        df = pd.read_excel(arquivo_excel)
        # Garante que a coluna de valor seja tratada como string para preservar f√≥rmulas
        if 'valor' in df.columns:
            df['valor'] = df['valor'].astype(str)
    except FileNotFoundError:
        # Se n√£o existir, cria um novo DataFrame com a estrutura da planilha
        df = pd.DataFrame(columns=[
            'Nome do colaborador', 'Setor', 'Material', 'Quantidade', 'M√™s', 'valor'
        ])
    
    return df, arquivo_excel

# Fun√ß√£o para salvar na planilha
def salvar_planilha(df, arquivo_excel):
    # Preserva f√≥rmulas existentes na coluna 'valor'
    if 'valor' in df.columns:
        for idx, val in enumerate(df['valor']):
            if isinstance(val, str) and val.startswith('='):
                # Mant√©m as f√≥rmulas intactas
                pass
            elif pd.notna(val) and val != '':
                # Converte valores num√©ricos para float
                try:
                    df.at[idx, 'valor'] = float(val)
                except (ValueError, TypeError):
                    pass
    
    df.to_excel(arquivo_excel, index=False)
    st.cache_data.clear()

# Carrega a planilha
df, arquivo_excel = carregar_planilha()

# Layout em colunas



st.subheader("‚ûï Novo Registro de Estoque")
    
with st.form("form_estoque"):
        # Campos do formul√°rio baseados na planilha
    colaborador = st.text_input("Nome do colaborador:", max_chars=100)
        
    setor = st.selectbox(
            "Setor:",
            ["BackOffice", "TI", "Comercial", "Financeiro", "GG", "Marketing", 
             "Governan√ßa", "Processos e Qualidade", "Tesouraria", "Be Civis", "Cordena√ß√£o Back Office"]
)
        
    material = st.text_input("Material:", max_chars=100)
        
    quantidade = st.number_input("Quantidade:", min_value=1, max_value=1000, step=1, value=1)
        
        # Input para m√™s apenas (como na planilha)
    meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
    mes = st.selectbox("M√™s:", meses, index=datetime.now().month-1)
        
    valor = st.text_input("Valor (opcional, use = para f√≥rmulas):", value="")
        
    submitted = st.form_submit_button("‚úÖ Registrar Movimento")
        
    if submitted:
        if colaborador and material:
                # Cria novo registro com a mesma estrutura da planilha
            novo_registro = {
                    'Nome do colaborador': colaborador,
                    'Setor': setor,
                    'Material': material,
                    'Quantidade': quantidade,
                    'M√™s': mes,
                    'valor': valor if valor else ""
                }
                
                # Adiciona ao DataFrame
            df = pd.concat([df, pd.DataFrame([novo_registro])], ignore_index=True)
                
                # Salva na planilha
            salvar_planilha(df, arquivo_excel)
                
            st.success("‚úÖ Registro salvo com sucesso!")
            st.balloons()
        else:
            st.error("‚ùå Preencha todos os campos obrigat√≥rios!")

# with col2:
#     st.subheader("üìä Estat√≠sticas do Estoque")
    
#     if not df.empty:
#         # Estat√≠sticas b√°sicas
#         total_itens = df['Quantidade'].sum()
#         total_registros = len(df)
#         meses_unicos = df['M√™s'].nunique()
        
#         col1, col2, col3 = st.columns(3)
        
#         with col1:
#             st.metric("Total de Itens", f"{total_itens:,}")
        
#         with col2:
#             st.metric("Total de Registros", total_registros)
        
#         with col3:
#             st.metric("Meses com Registros", meses_unicos)
        
#         # Gr√°fico de itens por setor
#         itens_por_setor = df.groupby('Setor')['Quantidade'].sum().reset_index()
#         fig = px.bar(
#             itens_por_setor.sort_values('Quantidade', ascending=False),
#             x='Setor',
#             y='Quantidade',
#             title="Itens por Setor",
#             color='Quantidade',
#             color_continuous_scale='Blues'
#         )
#         fig.update_layout(xaxis_tickangle=-45)
#         st.plotly_chart(fig, use_container_width=True)
        
#         # Gr√°fico de itens por m√™s
#         itens_por_mes = df.groupby('M√™s')['Quantidade'].sum().reset_index()
#         # Ordenar meses cronologicamente
#         ordem_meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
#                       "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
#         itens_por_mes['M√™s'] = pd.Categorical(itens_por_mes['M√™s'], categories=ordem_meses, ordered=True)
#         itens_por_mes = itens_por_mes.sort_values('M√™s')
        
#         fig2 = px.line(
#             itens_por_mes, 
#             x='M√™s', 
#             y='Quantidade', 
#             title='Itens por M√™s',
#             markers=True
#         )
#         st.plotly_chart(fig2, use_container_width=True)

# Se√ß√£o de visualiza√ß√£o de dados
st.markdown("---")
st.subheader("üìã Dados da Planilha")

if not df.empty:
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtro_setor = st.selectbox(
            "Filtrar por setor:",
            ["Todos"] + list(df['Setor'].unique())
        )
    
    with col2:
        filtro_mes = st.selectbox(
            "Filtrar por m√™s:",
            ["Todos"] + list(df['M√™s'].unique())
        )
    
    with col3:
        filtro_material = st.selectbox(
            "Filtrar por material:",
            ["Todos"] + list(df['Material'].unique())
        )
    
    # Aplicar filtros
    df_filtrado = df.copy()
    
    if filtro_setor != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Setor'] == filtro_setor]
    
    if filtro_mes != "Todos":
        df_filtrado = df_filtrado[df_filtrado['M√™s'] == filtro_mes]
    
    if filtro_material != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Material'] == filtro_material]
    
    # Exibe dados filtrados
    st.dataframe(
        df_filtrado, 
        use_container_width=True,
        hide_index=True
    )
    
    # Op√ß√£o para baixar a planilha
    with open(arquivo_excel, "rb") as file:
        st.download_button(
            label="üì• Baixar Planilha Completa",
            data=file,
            file_name=arquivo_excel,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
else:
    st.info("üìù Nenhum registro encontrado. Use o formul√°rio acima para adicionar movimentos de estoque.")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    st.markdown("""
    **Como usar:**
    1. Preencha o formul√°rio √† esquerda
    2. Os campos devem corresponder aos da planilha
    3. Clique em 'Registrar Movimento'
    4. Os dados ser√£o salvos na planilha Excel
    5. Use os filtros para visualizar dados espec√≠ficos
    """)
    
    st.markdown("---")
    
    if not df.empty:
        st.markdown("**üìà Estat√≠sticas Gerais:**")
        ultimo_registro = df.iloc[-1]['Nome do colaborador'] if 'Nome do colaborador' in df.columns else "N/A"
        ultimo_mes = df.iloc[-1]['M√™s'] if 'M√™s' in df.columns else "N/A"
        
        st.write(f"√öltimo registro: **{ultimo_registro}**")
        st.write(f"√öltimo m√™s: **{ultimo_mes}**")
        
        # Materiais mais retirados
        st.markdown("---")
        st.markdown("**üì¶ Materiais Mais Retirados:**")
        top_materiais = df.groupby('Material')['Quantidade'].sum().nlargest(5)
        for material, qtd in top_materiais.items():
            st.write(f"- {material}: {qtd} unidades")





