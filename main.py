import streamlit as st
import pandas as pd
import plotly.express as px
from datetime import datetime
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Controle de Estoque Recep√ß√£o", 
    page_icon="üì¶", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo da aplica√ß√£o
st.title("üì¶ Controle de Estoque - Recep√ß√£o")
st.markdown("---")

# Fun√ß√£o para carregar a planilha existente SEM cache
def carregar_planilha():
    arquivo_excel = "Controle de estoque recep√ß√£o.xlsx"
    
    try:
        df = pd.read_excel(arquivo_excel)
        # Garante que a coluna de valor seja tratada como string para preservar f√≥rmulas
        if 'valor' in df.columns:
            df['valor'] = df['valor'].astype(str)
    except FileNotFoundError:
        # Se n√£o existir, cria um novo DataFrame com a estrutura da planilha
        df = pd.DataFrame(columns=[
            'Nome do colaborador', 'Setor', 'Material', 'Quantidade', 'M√™s', 'valor'
        ])
    
    return df, arquivo_excel

# Fun√ß√£o para salvar na planilha
def salvar_planilha(df, arquivo_excel):
    # Preserva f√≥rmulas existentes na coluna 'valor'
    if 'valor' in df.columns:
        for idx, val in enumerate(df['valor']):
            if isinstance(val, str) and val.startswith('='):
                # Mant√©m as f√≥rmulas intactas
                pass
            elif pd.notna(val) and val != '':
                # Converte valores num√©ricos para float
                try:
                    df.at[idx, 'valor'] = float(val)
                except (ValueError, TypeError):
                    pass
    
    df.to_excel(arquivo_excel, index=False)

# Carrega a planilha - SEM cache para garantir que sempre carrega os dados mais recentes
df, arquivo_excel = carregar_planilha()

# Garantir que a coluna Material seja tratada corretamente
if not df.empty and 'Material' in df.columns:
    df["Material"] = df["Material"].str.strip()

# Usar session_state para manter os dados durante a sess√£o
if 'dados_estoque' not in st.session_state:
    st.session_state.dados_estoque = df.copy()

# Layout em colunas
col1, col2 = st.columns(2)

with col1:
    st.subheader("‚ûï Novo Registro de Estoque")
        
    with st.form("form_estoque"):
        # Campos do formul√°rio baseados na planilha
        colaborador = st.text_input("Nome do colaborador:", max_chars=100)
            
        setor = st.selectbox(
            "Setor:",
            ["BackOffice", "TI", "Comercial", "Financeiro", "GG", "Marketing", 
            "Governan√ßa", "Processos e Qualidade", "Tesouraria", "Be Civis", "Cordena√ß√£o Back Office"]
        )
            
        material = st.selectbox("Material:", [
            "Pilha AA", "Pilha AAA", "Saco Pl√°stico PP 240mm X 320mm: 50 unidades", 
            "RESMA DE PAPEL A4 - 500FLS", "Post-it Pequeno", "Post-It Grande", 
            "Caderno", "Caneta Azul", "Caneta Preta", "Caneta Vermelha", 
            "Caneta Colorida", "Agenda", "L√°pis", "Borracha", "Apontador", 
            "Marca-Texto", "Lapizeira", "Grafite", "Corretivo", "Clip", "Pilha C", 
            "Grampo", "Grampeador", "Apoio de P√©", "Apoio de Notebook", 
            "Papel Timbrado", "COLA EM BASTAO 40G", "TESOUSA", "CURATIVO - JOELHO", 
            "CURATIVO TRANSPARENTE", "FITA CREPE - 12mmX30M", "√Ålcool em Gel 50g", 
            "Extrator de Grampo Galvanizado", "Envelope Personalizado", 
            "Envelope A4 Saco Kraf Pardo 240x340 cm", "APOIO/SUPORTE DE MONITOR", 
            "Cart√£o Presente - SPOTIFY PREMIUM", 
            "Etiqueta Adesiva A4 350 - 100 Folhas - 3000 Etiq.", "AGUA COM GAS", 
            "√ÅGUA MINERAL 250ML", "REDBUD - ZERO", "LEITE", "REFRIGERANTE - SCHWEPPES", 
            "CERVEJA", "REFRIGERANTE COCA-COLA 310ML", "REFRIGERANTE COCA-COLA ZERO 220ML", 
            "REFRIGERANTE COCA-COLA ZERO 310ML", "REFRIGERANTE FANTA UVA", 
            "REFRIGERANTE GUARANA 350ML", "SUCO 290ML", "PAPEL TIMBRADO", 
            "PAPEL TOALHA", "M√ÅSCARA", 
            "REABASTECEDOR PARA PINCEL DE QUADRO BRANCO - PRETO", 
            "REABASTECEDOR PARA PINCEL DE QUADRO BRANCO - AZUL", 
            "REABASTECEDOR PARA PINCEL DE QUADRO BRANCO - VERMELHO", 
            "MINI-GRAMPEADOR GENMES P/25FLS CORES DIVERSAS", 
            "PASTA PLASTICA EM L PP 0,15 A4 - TRANSPARENTE", 
            "FITA ADESIVA PP 12MMX30M DUREX HB0041744262 3M PT 10 UM", 
            "FITA CREPE - 12mmX30M", 
            "FITA DUPLA FACE 3M SCOTCH FIXA FORTE FIXA√á√ÉO EXTREMA - 24mm x 2"
        ])
            
        quantidade = st.number_input("Quantidade:", min_value=1, max_value=1000, step=1, value=1)
            
        # Input para m√™s apenas (como na planilha)
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        mes = st.selectbox("M√™s:", meses, index=datetime.now().month-1)
            
        valor = st.text_input("Valor (opcional, use = para f√≥rmulas):", value="")
            
        submitted = st.form_submit_button("‚úÖ Registrar Movimento")
            
        if submitted:
            if colaborador and material:
                # Cria novo registro com a mesma estrutura da planilha
                novo_registro = {
                    'Nome do colaborador': colaborador,
                    'Setor': setor,
                    'Material': material,
                    'Quantidade': quantidade,
                    'M√™s': mes,
                    'valor': valor if valor else ""
                }
                    
                # Adiciona ao DataFrame na session_state
                novo_df = pd.concat([st.session_state.dados_estoque, pd.DataFrame([novo_registro])], ignore_index=True)
                st.session_state.dados_estoque = novo_df
                    
                # Salva na planilha
                salvar_planilha(st.session_state.dados_estoque, arquivo_excel)
                    
                st.success("‚úÖ Registro salvo com sucesso!")
                st.balloons()
            else:
                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")

with col2:
    st.subheader("üìä Estat√≠sticas do Estoque")
    
    if not st.session_state.dados_estoque.empty:
        # Estat√≠sticas b√°sicas
        total_itens = st.session_state.dados_estoque['Quantidade'].sum()
        total_registros = len(st.session_state.dados_estoque)
        meses_unicos = st.session_state.dados_estoque['M√™s'].nunique()
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Total de Itens", f"{total_itens:,}")
        
        with col2:
            st.metric("Total de Registros", total_registros)
        
        with col3:
            st.metric("Meses com Registros", meses_unicos)
        
        # Gr√°fico de itens por setor
        itens_por_setor = st.session_state.dados_estoque.groupby('Setor')['Quantidade'].sum().reset_index()
        fig = px.bar(
            itens_por_setor.sort_values('Quantidade', ascending=False),
            x='Setor',
            y='Quantidade',
            title="Itens por Setor",
            color='Quantidade',
            color_continuous_scale='Blues'
        )
        fig.update_layout(xaxis_tickangle=-45)
        st.plotly_chart(fig, use_container_width=True)
        
        # Gr√°fico de itens por m√™s
        itens_por_mes = st.session_state.dados_estoque.groupby('M√™s')['Quantidade'].sum().reset_index()
        # Ordenar meses cronologicamente
        ordem_meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                      "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        itens_por_mes['M√™s'] = pd.Categorical(itens_por_mes['M√™s'], categories=ordem_meses, ordered=True)
        itens_por_mes = itens_por_mes.sort_values('M√™s')
        
        fig2 = px.line(
            itens_por_mes, 
            x='M√™s', 
            y='Quantidade', 
            title='Itens por M√™s',
            markers=True
        )
        st.plotly_chart(fig2, use_container_width=True)
    else:
        st.info("Nenhum dado dispon√≠vel para exibir estat√≠sticas.")

# Se√ß√£o de visualiza√ß√£o de dados
st.markdown("---")
st.subheader("üìã Dados da Planilha")

if not st.session_state.dados_estoque.empty:
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtro_setor = st.selectbox(
            "Filtrar por setor:",
            ["Todos"] + list(st.session_state.dados_estoque['Setor'].unique())
        )
    
    with col2:
        filtro_mes = st.selectbox(
            "Filtrar por m√™s:",
            ["Todos"] + list(st.session_state.dados_estoque['M√™s'].unique())
        )
    
    with col3:
        filtro_material = st.selectbox(
            "Filtrar por material:",
            ["Todos"] + list(st.session_state.dados_estoque['Material'].unique())
        )
    
    # Aplicar filtros
    df_filtrado = st.session_state.dados_estoque.copy()
    
    if filtro_setor != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Setor'] == filtro_setor]
    
    if filtro_mes != "Todos":
        df_filtrado = df_filtrado[df_filtrado['M√™s'] == filtro_mes]
    
    if filtro_material != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Material'] == filtro_material]
    
    # Exibe dados filtrados
    st.dataframe(
        df_filtrado, 
        use_container_width=True,
        hide_index=True
    )
    
    # Interface para exclus√£o de registros
    st.subheader("üóëÔ∏è Excluir Registros")
    
    with st.form("form_excluir"):
        indices_para_excluir = st.multiselect(
            "Selecione os √≠ndices dos registros a excluir:",
            options=df_filtrado.index.tolist(),
            format_func=lambda x: f"√çndice {x}: {df_filtrado.loc[x, 'Nome do colaborador']} - {df_filtrado.loc[x, 'Material']}"
        )
        
        confirmar_exclusao = st.form_submit_button("Confirmar Exclus√£o")
        
        if confirmar_exclusao and indices_para_excluir:
            # Remove os registros selecionados
            novo_df = st.session_state.dados_estoque.drop(indices_para_excluir).reset_index(drop=True)
            st.session_state.dados_estoque = novo_df
            salvar_planilha(st.session_state.dados_estoque, arquivo_excel)
            st.success(f"‚úÖ {len(indices_para_excluir)} registro(s) exclu√≠do(s) com sucesso!")
            st.rerun()

    # Op√ß√£o para baixar a planilha
    with open(arquivo_excel, "rb") as file:
        st.download_button(
            label="üì• Baixar Planilha Completa",
            data=file,
            file_name=arquivo_excel,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
else:
    st.info("üìù Nenhum registro encontrado. Use o formul√°rio acima para adicionar movimentos de estoque.")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    st.markdown("""
    **Como usar:**
    1. Preencha o formul√°rio √† esquerda
    2. Os campos devem corresponder aos da planilha
    3. Clique em 'Registrar Movimento'
    4. Os dados ser√£o salvos na planilha Excel
    5. Use os filtros para visualizar dados espec√≠ficos
    """)
    
    st.markdown("---")
    
    if not st.session_state.dados_estoque.empty:
        st.markdown("**üìà Estat√≠sticas Gerais:**")
        ultimo_registro = st.session_state.dados_estoque.iloc[-1]['Nome do colaborador'] if 'Nome do colaborador' in st.session_state.dados_estoque.columns else "N/A"
        ultimo_mes = st.session_state.dados_estoque.iloc[-1]['M√™s'] if 'M√™s' in st.session_state.dados_estoque.columns else "N/A"
        
        st.write(f"√öltimo registro: **{ultimo_registro}**")
        st.write(f"√öltimo m√™s: **{ultimo_mes}**")
        
        # Materiais mais retirados
        st.markdown("---")
        st.markdown("**üì¶ Materiais Mais Retirados:**")
        top_materiais = st.session_state.dados_estoque.groupby('Material')['Quantidade'].sum().nlargest(5)
        for material, qtd in top_materiais.items():
            st.write(f"- {material}: {qtd} unidades")










