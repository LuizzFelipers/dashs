# import pandas as pd
# import streamlit as st
# import plotly.express as px
# from datetime import datetime
# import os

# st.set_page_config(page_title="Controle de Limpeza",
#                    layout="wide",
#                    page_icon="üßº",
#                    initial_sidebar_state="expanded")

# st.title("üßºControle de Limpezaüßº")
# st.markdown("-------")


# df = pd.DataFrame()
# arquivo_excel = "produtos_limpeza.xlsx"

# col1, col2 = st.columns(2)

# with col1:
#     st.subheader("‚ûï Novo Registro de Sa√≠da")
#     with st.form("form_novo_registro"):
       
#         colaborador = st.text_input("Colaborador")
#         produto = st.selectbox("Produto:",[
#                                         "√ÅGUA SANIT√ÅRIA KI J√ìIA 5L",
#                                         "ALCOOL DESINF LIQ 70",
#                                         "√ÅLCOOL EM GEL TORK 1000L",
#                                         "BRILHA INOX AZULIM GATILHO",
#                                         "BUCHA FIBRA VERDE DE LIMPEZA PESADA - USO GERAL",
#                                         "COLETOR DE ABSORVENTE FEMININO CAIXA COM 18 UN",
#                                         "DESINFERANTE AEROSSOL - LYSOFORM",
#                                         "DESINFETANTE AZULIM 5L",
#                                         "DESINFETANTE PARA SUPERF√çCIES", 
#                                         "DETERGENTE L√çQUIDO LAVA LOU√áAS",
#                                         "ESPONJA MULTIUSO DUPLA FACE", 
#                                         "GLADE 269ML",
#                                         "INSERTICIDA AEROSOOL 360ML BAYGON",
#                                         "LIMPADOR LIMPEZA PESADA",
#                                         "LIMPADOR MULTIUSO 500ML",
#                                         "LIMPADOR MULTIUSO CIF",
#                                         "LIMPADOR PATO PURIFIC LAVANDA",
#                                         "ODORIZADOR AEROSSOL 360ML",
#                                         "ODORIZADOR DE AMBIENTE LAVANDA FLORAL 400ML",
#                                         "PAPEL HIGIENICO FOLHA SIMPLES 8 ROLOS 10CMX400M",
#                                         "PAPEL TOALHA INT ADV FS 16X260",
#                                         "SABONETE LIQUIDO M√ÉOS SOAP - TAM G",
#                                         "SABONETE LIQUIDO M√ÉOS SOAP  - TAM P", 
#                                         "SACOS DE LIXO 110L PA 100 UN",
#                                         "TOILET SEAT CLEANER",
#                                         "ZUPP CLORO ATIVO 500 ML",
#                                         "SACOS DE LIXO 40 LITROS",
#                                         "TELA PARA MICTORIO"
#                                         ])
#         meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
#         mes = st.selectbox("M√™s", meses)
#         quantidade = st.number_input("Quantidade", min_value=1, step=1)
#         andar = st.selectbox("Andar",["3¬∞ Andar","4¬∞ Andar"])

#         submitted = st.form_submit_button("‚úÖ Adicionar Registro")
#         if submitted:
#             if colaborador and produto:
#                     # Cria novo registro com a mesma estrutura da planilha
#                 novo_registro = {
#                         'Nome do colaborador': colaborador,
#                         'Produto': produto,
#                         'Andar': andar,
#                         'Quantidade': quantidade,
#                         'M√™s': mes
#                     }
                    
#                     # Adiciona ao DataFrame
#                 df = pd.concat([df, pd.DataFrame([novo_registro])], ignore_index=True)
                    
#                     # Salva na planilha
#                 (df, arquivo_excel)
                    
#                 st.success("‚úÖ Registro salvo com sucesso!")
#                 st.balloons()
#             else:
#                 st.error("‚ùå Preencha todos os campos obrigat√≥rios!")        

# with col2:
#     st.subheader("üìä Estat√≠sticas do Estoque")

#     if not df.empty:
#         # Estat√≠sticas Gerais
#         total_itens = df['Quantidade'].sum()
#         total_registros = len(df)

#         col3, col4 = st.columns(2)
#         with col3:
#             st.metric("Total de Itens", total_itens)
#         with col4:
#             st.metric("Total de Registros", total_registros)

#         st.markdown("-----")

#         # Gr√°fico de Barras - Itens por M√™s
#         itens_por_mes = df.groupby('M√™s')['Quantidade'].sum().reindex(meses)
#         fig_mes = px.bar(itens_por_mes, x=itens_por_mes.index, y='Quantidade', title="Itens Sa√≠dos por M√™s", labels={"M√™s": "M√™s", "Quantidade": "Total de Itens"})
#         st.plotly_chart(fig_mes, use_container_width=True)

#         # Gr√°fico de Barras - Itens por Andar
#         itens_por_andar = df.groupby('Andar')['Quantidade'].sum()
#         fig_andar = px.bar(itens_por_andar, x=itens_por_andar.index, y='Quantidade', title="Itens Sa√≠dos por Andar", labels={"Andar": "Andar", "Quantidade": "Total de Itens"})
#         st.plotly_chart(fig_andar, use_container_width=True)

#         # Tabela Resumo por Item
#         resumo_item = df.groupby('Produto')['Quantidade'].sum().reset_index().sort_values(by='Quantidade', ascending=False)
#         st.subheader("Resumo de Itens")
#         st.dataframe(resumo_item, use_container_width=True)

# with st.sidebar:
#     st.header("‚ÑπÔ∏èInforma√ß√µes sobre o Sistema")
#     st.markdown("""
#                 1. Preencha todos os campos do formul√°rio para adicionar um novo registro de sa√≠da de produto.
#                 2. Utilize o campo "Quantidade" para especificar o n√∫mero de unidades retiradas)
#                 3. As estat√≠sticas e gr√°ficos ser√£o atualizados automaticamente com base nos dados inseridos.
#                 """)
#     st.markdown("-------")

#     if not df.empty:
#         st.markdown("**üìà Estat√≠sticas Gerais:**")
#         ultimo_registro = df.iloc[-1]['Nome do colaborador'] if 'Nome do colaborador' in df.columns else "N/A"
#         ultimo_mes = df.iloc[-1]['M√™s'] if 'M√™s' in df.columns else "N/A"
        
#         st.write(f"√öltimo registro: **{ultimo_registro}**")
#         st.write(f"√öltimo m√™s: **{ultimo_mes}**")
        
#         # Materiais mais retirados
#         st.markdown("---")
#         st.markdown("**üì¶ Materiais Mais Retirados:**")
#         top_materiais = df.groupby('Produto')['Quantidade'].sum().nlargest(5)
#         for material, qtd in top_materiais.items():
#             st.write(f"- {material}: {qtd} unidades")

# st.markdown("-------")
# st.subheader("üìãDados da Planilha")

# with open(arquivo_excel, "rb") as file:
#     st.download_button(
#         label="üì• Baixar Planilha Excel",
#         data=file,
#         file_name="produtos_limpeza.xlsx",
#         mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
#     )

# import pandas as pd
# import streamlit as st
# import plotly.express as px
# from datetime import datetime
# import os

# # Configura√ß√£o da p√°gina
# st.set_page_config(
#     page_title="Controle de Limpeza",
#     page_icon="üßº", 
#     layout="wide",
#     initial_sidebar_state="expanded"
# )

# # T√≠tulo da aplica√ß√£o
# st.title("üßº Controle de Limpeza üßº")
# st.markdown("---")

# # Fun√ß√£o para carregar a planilha existente
# @st.cache_data
# def carregar_planilha():
#     arquivo_excel = "produtos_limpeza.xlsx"
    
#     try:
#         df = pd.read_excel(arquivo_excel)
#     except FileNotFoundError:
#         # Se n√£o existir, cria um novo DataFrame com a estrutura da planilha
#         df = pd.DataFrame(columns=[
#             'Nome do colaborador', 'Produto', 'Andar', 'Quantidade', 'M√™s'
#         ])
    
#     return df, arquivo_excel

# # Fun√ß√£o para salvar na planilha
# def salvar_planilha(df, arquivo_excel):
#     df.to_excel(arquivo_excel, index=False)
#     st.cache_data.clear()

# # Carrega a planilha
# df, arquivo_excel = carregar_planilha()

# # Layout em colunas
# col1, col2 = st.columns(2)

# with col1:
#     st.subheader("‚ûï Novo Registro de Sa√≠da")
    
#     with st.form("form_novo_registro"):
#         colaborador = st.text_input("Colaborador:", max_chars=100)
        
#         produto = st.selectbox("Produto:", [
#             "√ÅGUA SANIT√ÅRIA KI J√ìIA 5L",
#             "ALCOOL DESINF LIQ 70",
#             "√ÅLCOOL EM GEL TORK 1000L",
#             "BRILHA INOX AZULIM GATILHO",
#             "BUCHA FIBRA VERDE DE LIMPEZA PESADA - USO GERAL",
#             "COLETOR DE ABSORVENTE FEMININO CAIXA COM 18 UN",
#             "DESINFERANTE AEROSSOL - LYSOFORM",
#             "DESINFETANTE AZULIM 5L",
#             "DESINFETANTE PARA SUPERF√çCIES", 
#             "DETERGENTE L√çQUIDO LAVA LOU√áAS",
#             "ESPONJA MULTIUSO DUPLA FACE", 
#             "GLADE 269ML",
#             "INSERTICIDA AEROSOOL 360ML BAYGON",
#             "LIMPADOR LIMPEZA PESADA",
#             "LIMPADOR MULTIUSO 500ML",
#             "LIMPADOR MULTIUSO CIF",
#             "LIMPADOR PATO PURIFIC LAVANDA",
#             "ODORIZADOR AEROSSOL 360ML",
#             "ODORIZADOR DE AMBIENTE LAVANDA FLORAL 400ML",
#             "PAPEL HIGIENICO FOLHA SIMPLES 8 ROLOS 10CMX400M",
#             "PAPEL TOALHA INT ADV FS 16X260",
#             "SABONETE LIQUIDO M√ÉOS SOAP - TAM G",
#             "SABONETE LIQUIDO M√ÉOS SOAP  - TAM P", 
#             "SACOS DE LIXO 110L PA 100 UN",
#             "TOILET SEAT CLEANER",
#             "ZUPP CLORO ATIVO 500 ML",
#             "SACOS DE LIXO 40 LITROS",
#             "TELA PARA MICTORIO"
#         ])
        
#         meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
#                 "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
#         mes = st.selectbox("M√™s:", meses, index=datetime.now().month-1)
        
#         quantidade = st.number_input("Quantidade:", min_value=1, step=1, value=1)
        
#         andar = st.selectbox("Andar:", ["3¬∞ Andar", "4¬∞ Andar"])
        
#         submitted = st.form_submit_button("‚úÖ Adicionar Registro")
        
#         if submitted:
#             if colaborador and produto:
#                 # Cria novo registro com a mesma estrutura da planilha
#                 novo_registro = {
#                     'Nome do colaborador': colaborador,
#                     'Produto': produto,
#                     'Andar': andar,
#                     'Quantidade': quantidade,
#                     'M√™s': mes
#                 }
                
#                 # Adiciona ao DataFrame
#                 df = pd.concat([df, pd.DataFrame([novo_registro])], ignore_index=True)
                
#                 # Salva na planilha
#                 salvar_planilha(df, arquivo_excel)
                
#                 st.success("‚úÖ Registro salvo com sucesso!")
#                 st.balloons()
#             else:
#                 st.error("‚ùå Preencha todos os campos obrigat√≥rios!")

# with col2:
#     st.subheader("üìä Estat√≠sticas do Estoque")
    
#     if not df.empty:
#         # Estat√≠sticas b√°sicas
#         total_itens = df['Quantidade'].sum()
#         total_registros = len(df)
#         meses_unicos = df['M√™s'].nunique()
        
#         col3, col4, col5 = st.columns(3)
        
#         with col3:
#             st.metric("Total de Itens", f"{total_itens:,}")
        
#         with col4:
#             st.metric("Total de Registros", total_registros)
        
#         with col5:
#             st.metric("Meses com Registros", meses_unicos)
        
#         # Gr√°fico de itens por m√™s
#         itens_por_mes = df.groupby('M√™s')['Quantidade'].sum().reset_index()
#         # Ordenar meses cronologicamente
#         ordem_meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
#                       "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
#         itens_por_mes['M√™s'] = pd.Categorical(itens_por_mes['M√™s'], categories=ordem_meses, ordered=True)
#         itens_por_mes = itens_por_mes.sort_values('M√™s')
        
#         fig_mes = px.line(
#             itens_por_mes, 
#             x='M√™s', 
#             y='Quantidade', 
#             title='Itens por M√™s',
#             markers=True
#         )
#         st.plotly_chart(fig_mes, use_container_width=True)
        
#         # Gr√°fico de itens por andar
#         itens_por_andar = df.groupby('Andar')['Quantidade'].sum().reset_index()
#         fig_andar = px.bar(
#             itens_por_andar,
#             x='Andar',
#             y='Quantidade',
#             title="Itens por Andar",
#             color='Quantidade',
#             color_continuous_scale='Greens'
#         )
#         st.plotly_chart(fig_andar, use_container_width=True)

# # Se√ß√£o de visualiza√ß√£o de dados
# st.markdown("---")
# st.subheader("üìã Dados da Planilha")

# if not df.empty:
#     # Filtros
#     col1, col2, col3 = st.columns(3)
    
#     with col1:
#         filtro_andar = st.selectbox(
#             "Filtrar por andar:",
#             ["Todos"] + list(df['Andar'].unique())
#         )
    
#     with col2:
#         filtro_mes = st.selectbox(
#             "Filtrar por m√™s:",
#             ["Todos"] + list(df['M√™s'].unique())
#         )
    
#     with col3:
#         filtro_produto = st.selectbox(
#             "Filtrar por produto:",
#             ["Todos"] + list(df['Produto'].unique())
#         )
    
#     # Aplicar filtros
#     df_filtrado = df.copy()
    
#     if filtro_andar != "Todos":
#         df_filtrado = df_filtrado[df_filtrado['Andar'] == filtro_andar]
    
#     if filtro_mes != "Todos":
#         df_filtrado = df_filtrado[df_filtrado['M√™s'] == filtro_mes]
    
#     if filtro_produto != "Todos":
#         df_filtrado = df_filtrado[df_filtrado['Produto'] == filtro_produto]
    
#     # Exibe dados filtrados
#     st.dataframe(
#         df_filtrado, 
#         use_container_width=True,
#         hide_index=True
#     )
    
#     # Op√ß√£o para baixar a planilha
#     with open(arquivo_excel, "rb") as file:
#         st.download_button(
#             label="üì• Baixar Planilha Completa",
#             data=file,
#             file_name=arquivo_excel,
#             mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
#             use_container_width=True
#         )
# else:
#     st.info("üìù Nenhum registro encontrado. Use o formul√°rio acima para adicionar movimentos de estoque.")

# # Sidebar com informa√ß√µes
# with st.sidebar:
#     st.header("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
#     st.markdown("""
#     **Como usar:**
#     1. Preencha o formul√°rio √† esquerda
#     2. Os campos devem corresponder aos da planilha
#     3. Clique em 'Adicionar Registro'
#     4. Os dados ser√£o salvos na planilha Excel
#     5. Use os filtros para visualizar dados espec√≠ficos
#     """)
    
#     st.markdown("---")
    
#     if not df.empty:
#         st.markdown("**üìà Estat√≠sticas Gerais:**")
#         ultimo_registro = df.iloc[-1]['Nome do colaborador'] if 'Nome do colaborador' in df.columns else "N/A"
#         ultimo_mes = df.iloc[-1]['M√™s'] if 'M√™s' in df.columns else "N/A"
        
#         st.write(f"√öltimo registro: **{ultimo_registro}**")
#         st.write(f"√öltimo m√™s: **{ultimo_mes}**")
        
#         # Produtos mais retirados
#         st.markdown("---")
#         st.markdown("**üßº Produtos Mais Retirados:**")
#         top_produtos = df.groupby('Produto')['Quantidade'].sum().nlargest(5)
#         for produto, qtd in top_produtos.items():
#             st.write(f"- {produto}: {qtd} unidades")

import pandas as pd
import streamlit as st
import plotly.express as px
from datetime import datetime
import os

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Controle de Limpeza",
    page_icon="üßº", 
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√≠tulo da aplica√ß√£o
st.title("üßº Controle de Limpeza üßº")
st.markdown("---")

# Fun√ß√£o para carregar a planilha existente
@st.cache_data
def carregar_planilha():
    arquivo_excel = "produtos_limpeza.xlsx"
    
    try:
        df = pd.read_excel(arquivo_excel)
    except FileNotFoundError:
        # Se n√£o existir, cria um novo DataFrame com a estrutura da planilha
        df = pd.DataFrame(columns=[
            'Nome do colaborador', 'Produto', 'Andar', 'Quantidade', 'M√™s'
        ])
    
    return df, arquivo_excel

# Fun√ß√£o para salvar na planilha
def salvar_planilha(df, arquivo_excel):
    df.to_excel(arquivo_excel, index=False)
    st.cache_data.clear()

# Carrega a planilha
df, arquivo_excel = carregar_planilha()

# Layout em colunas
col1, col2 = st.columns(2)

with col1:
    st.subheader("‚ûï Novo Registro de Sa√≠da")
    
    with st.form("form_novo_registro"):
        colaborador = st.text_input("Colaborador:", max_chars=100)
        
        produto = st.selectbox("Produto:", [
            "√ÅGUA SANIT√ÅRIA KI J√ìIA 5L",
            "ALCOOL DESINF LIQ 70",
            "√ÅLCOOL EM GEL TORK 1000L",
            "BRILHA INOX AZULIM GATILHO",
            "BUCHA FIBRA VERDE DE LIMPEZA PESADA - USO GERAL",
            "COLETOR DE ABSORVENTE FEMININO CAIXA COM 18 UN",
            "DESINFERANTE AEROSSOL - LYSOFORM",
            "DESINFETANTE AZULIM 5L",
            "DESINFETANTE PARA SUPERF√çCIES", 
            "DETERGENTE L√çQUIDO LAVA LOU√áAS",
            "ESPONJA MULTIUSO DUPLA FACE", 
            "GLADE 269ML",
            "INSERTICIDA AEROSOOL 360ML BAYGON",
            "LIMPADOR LIMPEZA PESADA",
            "LIMPADOR MULTIUSO 500ML",
            "LIMPADOR MULTIUSO CIF",
            "LIMPADOR PATO PURIFIC LAVANDA",
            "ODORIZADOR AEROSSOL 360ML",
            "ODORIZADOR DE AMBIENTE LAVANDA FLORAL 400ML",
            "PAPEL HIGIENICO FOLHA SIMPLES 8 ROLOS 10CMX400M",
            "PAPEL TOALHA INT ADV FS 16X260",
            "SABONETE LIQUIDO M√ÉOS SOAP - TAM G",
            "SABONETE LIQUIDO M√ÉOS SOAP  - TAM P", 
            "SACOS DE LIXO 110L PA 100 UN",
            "TOILET SEAT CLEANER",
            "ZUPP CLORO ATIVO 500 ML",
            "SACOS DE LIXO 40 LITROS",
            "TELA PARA MICTORIO"
        ])
        
        meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        mes = st.selectbox("M√™s:", meses, index=datetime.now().month-1)
        
        quantidade = st.number_input("Quantidade:", min_value=1, step=1, value=1)
        
        andar = st.selectbox("Andar:", ["3¬∞ Andar", "4¬∞ Andar"])
        
        submitted = st.form_submit_button("‚úÖ Adicionar Registro")
        
        if submitted:
            if colaborador and produto:
                # Cria novo registro com a mesma estrutura da planilha
                novo_registro = {
                    'Nome do colaborador': colaborador,
                    'Produto': produto,
                    'Andar': andar,
                    'Quantidade': quantidade,
                    'M√™s': mes
                }
                
                # Adiciona ao DataFrame
                df = pd.concat([df, pd.DataFrame([novo_registro])], ignore_index=True)
                
                # Salva na planilha
                salvar_planilha(df, arquivo_excel)
                
                st.success("‚úÖ Registro salvo com sucesso!")
                st.balloons()
            else:
                st.error("‚ùå Preencha todos os campos obrigat√≥rios!")

with col2:
    st.subheader("üìä Estat√≠sticas do Estoque")
    
    if not df.empty:
        # Estat√≠sticas b√°sicas
        total_itens = df['Quantidade'].sum()
        total_registros = len(df)
        meses_unicos = df['M√™s'].nunique()
        
        col3, col4, col5 = st.columns(3)
        
        with col3:
            st.metric("Total de Itens", f"{total_itens:,}")
        
        with col4:
            st.metric("Total de Registros", total_registros)
        
        with col5:
            st.metric("Meses com Registros", meses_unicos)
        
        # Gr√°fico de itens por m√™s
        itens_por_mes = df.groupby('M√™s')['Quantidade'].sum().reset_index()
        # Ordenar meses cronologicamente
        ordem_meses = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho", 
                      "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"]
        itens_por_mes['M√™s'] = pd.Categorical(itens_por_mes['M√™s'], categories=ordem_meses, ordered=True)
        itens_por_mes = itens_por_mes.sort_values('M√™s')
        
        fig_mes = px.line(
            itens_por_mes, 
            x='M√™s', 
            y='Quantidade', 
            title='Itens por M√™s',
            markers=True
        )
        st.plotly_chart(fig_mes, use_container_width=True)
        
        # Gr√°fico de itens por andar
        itens_por_andar = df.groupby('Andar')['Quantidade'].sum().reset_index()
        fig_andar = px.bar(
            itens_por_andar,
            x='Andar',
            y='Quantidade',
            title="Itens por Andar",
            color='Quantidade',
            color_continuous_scale='Greens'
        )
        st.plotly_chart(fig_andar, use_container_width=True)

# Se√ß√£o de visualiza√ß√£o de dados
st.markdown("---")
st.subheader("üìã Dados da Planilha")

if not df.empty:
    # Filtros
    col1, col2, col3 = st.columns(3)
    
    with col1:
        filtro_andar = st.selectbox(
            "Filtrar por andar:",
            ["Todos"] + list(df['Andar'].unique())
        )
    
    with col2:
        filtro_mes = st.selectbox(
            "Filtrar por m√™s:",
            ["Todos"] + list(df['M√™s'].unique())
        )
    
    with col3:
        filtro_produto = st.selectbox(
            "Filtrar por produto:",
            ["Todos"] + list(df['Produto'].unique())
        )
    
    # Aplicar filtros
    df_filtrado = df.copy()
    
    if filtro_andar != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Andar'] == filtro_andar]
    
    if filtro_mes != "Todos":
        df_filtrado = df_filtrado[df_filtrado['M√™s'] == filtro_mes]
    
    if filtro_produto != "Todos":
        df_filtrado = df_filtrado[df_filtrado['Produto'] == filtro_produto]
    
    # Exibe dados filtrados com checkbox para sele√ß√£o
    st.markdown("**Selecione os registros para exclus√£o:**")
    
    # Adiciona checkbox para cada linha
    indices_para_excluir = []
    for idx, row in df_filtrado.iterrows():
        col1, col2, col3, col4, col5 = st.columns([1, 3, 3, 2, 2])
        with col1:
            excluir = st.checkbox("Excluir", key=f"excluir_{idx}")
        with col2:
            st.write(row['Nome do colaborador'])
        with col3:
            st.write(row['Produto'])
        with col4:
            st.write(row['Andar'])
        with col5:
            st.write(f"{row['Quantidade']} unid.")
        
        if excluir:
            indices_para_excluir.append(idx)
    
    # Bot√£o para confirmar exclus√£o
    if indices_para_excluir:
        if st.button("üóëÔ∏è Excluir Registros Selecionados", type="primary"):
            # Remove os registros selecionados
            df = df.drop(indices_para_excluir).reset_index(drop=True)
            salvar_planilha(df, arquivo_excel)
            st.success(f"‚úÖ {len(indices_para_excluir)} registro(s) exclu√≠do(s) com sucesso!")
            st.rerun()
    
    # Op√ß√£o para baixar a planilha
    with open(arquivo_excel, "rb") as file:
        st.download_button(
            label="üì• Baixar Planilha Completa",
            data=file,
            file_name=arquivo_excel,
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True
        )
else:
    st.info("üìù Nenhum registro encontrado. Use o formul√°rio acima para adicionar movimentos de estoque.")

# Sidebar com informa√ß√µes
with st.sidebar:
    st.header("‚ÑπÔ∏è Informa√ß√µes do Sistema")
    
    st.markdown("""
    **Como usar:**
    1. Preencha o formul√°rio √† esquerda
    2. Os campos devem corresponder aos da planilha
    3. Clique em 'Adicionar Registro'
    4. Os dados ser√£o salvos na planilha Excel
    5. Use os filtros para visualizar dados espec√≠ficos
    6. Marque os checkboxes e clique em 'Excluir Registros' para remover
    """)
    
    st.markdown("---")
    
    if not df.empty:
        st.markdown("**üìà Estat√≠sticas Gerais:**")
        ultimo_registro = df.iloc[-1]['Nome do colaborador'] if 'Nome do colaborador' in df.columns else "N/A"
        ultimo_mes = df.iloc[-1]['M√™s'] if 'M√™s' in df.columns else "N/A"
        
        st.write(f"√öltimo registro: **{ultimo_registro}**")
        st.write(f"√öltimo m√™s: **{ultimo_mes}**")
        
        # Produtos mais retirados
        st.markdown("---")
        st.markdown("**üßº Produtos Mais Retirados:**")
        top_produtos = df.groupby('Produto')['Quantidade'].sum().nlargest(5)
        for produto, qtd in top_produtos.items():
            st.write(f"- {produto}: {qtd} unidades")